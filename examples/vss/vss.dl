import model

typedef EthernetAddress = bit<48>
typedef IPv4Address = bit<32>

typedef ethernet_h = Ethernet_h {
    dstAddr: EthernetAddress,
    srcAddr: EthernetAddress,
    etherType: bit<16>
}

typedef ipv4_h = Ipv4_h {
    version: bit<4>,
    ihl: bit<4>,
    diffserv: bit<8>,
    totalLen: bit<16>,
    identification: bit<16>,
    flags: bit<3>,
    fragOffset: bit<13>,
    ttl: bit<8>,
    protocol: bit<8>,
    hdrChecksum: bit<16>,
    srcAddr: IPv4Address,
    dstAddr: IPv4Address
}

function csum_finish(partial: bit<32>): bit<16>
{
    if (partial > 32'hffff) {
        csum_finish((partial & 'hffff) + (partial >> 16))
    } else {
        ~partial as u16
    }
}

function recalc_csum16(csum: bit<16>, old: bit<16>, new: bit<16>): bit<16>
{
    /* Ones-complement arithmetic is endian-independent, so this code
     * does not use htons() or ntohs().
     *
     * See RFC 1624 for formula and explanation. */
    var hc_complement = ~csum;
    var m_complement = ~old;
    var m_prime = new;
    csum_finish(hc_complement as u32 + m_complement as u32 + m_prime as u32)
}

function ipv4_dec_ttl(ip0: ipv4_h): ipv4_h
{
  var ip = ip0;
  ip.ttl = ip.ttl - 1;
  ip.hdrChecksum = recalc_csum16(
      ip.hdrChecksum, ip0.ttl as u16, ip.ttl as u16); // XXX endianness?
  ip
}

typedef error = NoError |
                IPv4OptionsNotSupported |
                IPv4IncorrectVersion |
                IPv4ChecksumError

typedef parsed_packet = ParsedPacket {
    ethernet: ethernet_h,
    ip: Option<ipv4_h>
}

input relation IPv4_Match(dstAddr: IPv4Address,
                          dstAddr_plen: bit<8>,
                          nextHop: IPv4Address,
                          outputPort: port_id)
//match(lpm(dstAddr, dstAddr_plen))

function ipv4_mask(plen: bit<8>): IPv4Address {
    (64'hffffffff00000000 >> plen)[31:0]
}

function ipv4_match(m: IPv4_Match, a: IPv4Address): bool
{
    var mask = ipv4_mask(m.dstAddr_plen);
    ((m.dstAddr ^ a) & mask) == 0
}

input relation DMAC(nextHop: IPv4Address,
                    dmac: EthernetAddress)
primary key(r) r.nextHop

input relation SMAC(outputPort: port_id,
                    smac: EthernetAddress)
primary key(r) r.outputPort

control TopPipe(inout Parsed_packet headers,
                in error parseError, // parser error
                in InControl inCtrl, // input port
                out OutControl outCtrl) {
     /**
      * Indicates that a packet is dropped by setting the
      * output port to the DROP_PORT
      */
      action Drop_action()
      { outCtrl.outputPort = DROP_PORT; }

      IPv4Address nextHop;

     /**
      * Set the next hop and the output port.
      * Decrements ipv4 ttl field.
      * @param ivp4_dest ipv4 address of next hop
      * @param port output port
      */
      action Set_nhop(IPv4Address ipv4_dest, PortId port) {
          nextHop = ipv4_dest;
          headers.ip.ttl = headers.ip.ttl-1;
          outCtrl.outputPort = port;
      }

     /**
      * Computes address of next Ipv4 hop and output port
      * based on the Ipv4 destination of the current packet.
      * Decrements packet Ipv4 TTL.
      */
     table ipv4_match {
         key = { headers.ip.dstAddr : lpm @name(dstAddr) @plen(dstAddr_plen); }
         actions = {
              Drop_action;
              Set_nhop;
         }

         size = 1024;
         default_action = Drop_action;
     }

     /**
      * Send the packet to the CPU port
      */
      action Send_to_cpu()
      { outCtrl.outputPort = CPU_OUT_PORT; }

     /**
      * Check packet TTL and send to CPU if expired.
      */
     table check_ttl {
         key = { headers.ip.ttl : exact; }
         actions = { Send_to_cpu; NoAction; }
         const default_action = NoAction; // defined in core.p4
     }

     /**
      * Set the destination MAC address of the packet
      * @param dmac destination MAC address.
      */
      action Set_dmac(EthernetAddress dmac)
      { headers.ethernet.dstAddr = dmac; }
     /**
      * Set the destination Ethernet address of the packet
      * based on the next hop IP address.
      */
      table dmac {
          key = { nextHop : exact; }
          actions = {
               Drop_action;
               Set_dmac;
          }
          size = 1024;
          default_action = Drop_action;
      }

      /**
       * Set the source MAC address.
       * @param smac: source MAC address to use
       */
       action Set_smac(EthernetAddress smac)
       { headers.ethernet.srcAddr = smac; }

      /**
       * Set the source mac address based on the output port.
       */
      table smac {
           key = { outCtrl.outputPort : exact; }
           actions = {
                Drop_action;
                Set_smac;
          }
          size = 16;
          default_action = Drop_action;
      }

      apply {
          if (parseError != error.NoError) {
               Drop_action();  // invoke drop directly
               return;
          }

          ipv4_match.apply(); // Match result will go into nextHop
          if (outCtrl.outputPort == DROP_PORT) return;

          check_ttl.apply();
          if (outCtrl.outputPort == CPU_OUT_PORT) return;

          dmac.apply();
          if (outCtrl.outputPort == DROP_PORT) return;

          smac.apply();
    }
}
